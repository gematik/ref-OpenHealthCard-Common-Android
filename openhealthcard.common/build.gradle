apply plugin: 'com.android.library'
apply plugin: 'de.gematik.parent'
apply plugin: "de.gematik.asciidoctor"
apply plugin: "de.gematik.android.publish"
apply plugin: 'com.vanniktech.android.javadoc'

group = 'de.gematik.ti'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

//    implementation group: 'androidx.appcompat', name: 'appcompat', version: '1.0.2'
//    implementation group: 'androidx.constraintlayout', name: 'constraintlayout', version: '1.1.3'

    //############# Events #############
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'de.gematik.ti:openhealthcard.events:1.2.0'

    //Test @see https://developer.android.com/training/testing/set-up-project
    testImplementation 'junit:junit:4.12'
    // Core library
    androidTestImplementation 'androidx.test:core:1.0.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.0.0'
    androidTestImplementation 'androidx.test.ext:truth:1.0.0'
    androidTestImplementation 'com.google.truth:truth:0.42'

    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.1.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.1.0'

    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.1.0'

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.7.13'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.0-RC.4'
    testImplementation group: 'org.powermock', name: 'powermock-classloading-base', version: '2.0.0-RC.4'

    //Gematik
    implementation 'org.slf4j:slf4j-api:1.7.25'

    implementation group: 'de.gematik.ti', name: 'cardreader.provider.api', version: '1.2.1'
}

gematikDocumentation {
    projectShortcut = "OHCCOM"
}

gematikPublish {
    name = "OpenHealthCard-Common-Android"
    description = "The CardReaderProvider-NFC-Android library provides functionality to use the NFC interface on Android devices."
    gitHubProjectName = "ref-OpenHealthCard-Common-Android"
}



task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: 'build/intermediates/javac/debug/compileDebugJavaWithJavac',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*'])
    sourceDirectories = files('src/main/java')
    executionData = files('build/jacoco/testDebugUnitTest.exec')
    doFirst {
        files('build/intermediates/javac/debugAndroidTest/classes/').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.sources", "src/main/java"
        property "sonar.binaries", "build/intermediates/javac/debug/classes"
        property "sonar.java.binaries", "build/intermediates/javac/debug/classes"
        property "sonar.tests", "src/test/java, src/androidTest/java"
        property "sonar.java.test.binaries", "build/intermediates/javac/debugUnitTest/classes"

        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files
        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files
        unit.addAll(ui)
        def files = unit.join(", ")

        property "sonar.jacoco.reportPaths", files
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
        property "sonar.android.lint.report", "build/reports/lint-results.xml"
        property "sonar.dependencyCheck.reportPath", "${project.rootDir}/dependency-check-report.xml"
        property "sonar.dependencyCheck.htmlReportPath", "${project.rootDir}/dependency-check-report.html"
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from "${project.buildDir}/../src/main/java"
    include "**/*.java"
}

task testSourceJar(type: Jar) {
    classifier "test-sources"
    from "${project.buildDir}/../src/test/java/"
    include "**/*.java"
}
task adocJar(type: Jar) {
    classifier "adoc"
    from "${project.buildDir}/../doc"
    into "${project.name}"
    exclude "**/generated/**/*.*"
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from "${project.buildDir}/docs/javadoc/release"
    into "${project.name}"
}

artifacts {
    archives sourceJar
    archives testSourceJar
    archives adocJar
    archives javadocJar
}
